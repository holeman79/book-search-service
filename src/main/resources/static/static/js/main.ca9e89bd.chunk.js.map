{"version":3,"sources":["serviceWorker.js","components/common/Button/Button.js","components/common/Header/Header.js","store/modules/user.js","containers/common/HeaderContainer.js","components/common/Footer/Footer.js","components/common/PageTemplate/PageTemplate.js","components/common/Wrapper/Wrapper.js","components/list/Pagination/Pagination.js","store/modules/bookList.js","lib/api.js","components/list/BookList/BookList.js","components/list/SearchBar/SearchBar.js","containers/list/BookListContainer.js","pages/BookListPage.js","pages/NotFoundPage.js","components/App.js","store/configure.js","Root.js","index.js"],"names":["Boolean","window","location","hostname","match","cx","classNames","bind","styles","Div","children","rest","Button","to","onClick","disabled","theme","Element","Link","className","Header","logged","onLoginClick","initializeLogin","createAction","initialState","Map","login","userId","password","signup","name","handleActions","state","action","set","get","HeaderContainer","handleLoginClick","sessionStorage","props","UserActions","history","removeItem","reload","e","console","log","push","this","Component","connect","dispatch","bindActionCreators","userActions","withRouter","Footer","PageTemplate","Wrapper","title","Pagination","page","lastPage","getBookList","query","axios","queryString","stringify","meta","changeInput","targetTypes","List","books","target","pender","type","onSuccess","payload","data","content","fromJS","parseInt","value","BookItem","publishedDate","body","id","moment","format","BookList","bookList","size","map","book","toJS","tags","key","SearchBar","onChangeInput","onSearchClick","selected","onChange","toastColor","background","text","BookListContainer","toast","notify","createShowQueue","handleSearchClick","BookListActions","handleChangeInput","prevProps","prevState","document","documentElement","scrollTop","loading","pending","bookListActions","BookListPage","params","NotFoundPage","App","exact","path","component","reducers","combineReducers","modules","middlewares","penderMiddleware","composeEnhancers","compose","store","preloadedState","createStore","applyMiddleware","configure","Root","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca9e89bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport styles from './Button.scss';\nimport classNames from 'classnames/bind';\nimport { Link } from 'react-router-dom';\n\nconst cx = classNames.bind(styles);\n\nconst Div = ({children, ...rest}) => <div {...rest}>{children}</div>\n\nconst Button = ({\n    children, to, onClick, disabled, theme = 'default',\n}) => {\n    const Element = (to && !disabled) ? Link : Div;\n\n    return (\n        <Element\n            to={to}\n            className={cx('button', theme, {disabled})}\n            onClick={disabled ? () => null : onClick}>\n            {children}\n        </Element>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport styles from './Header.scss';\nimport classNames from 'classnames/bind';\nimport {Link} from 'react-router-dom';\nimport Button from \"../Button\";\n\nconst cx = classNames.bind(styles);\n\nconst Header = ({logged, onLoginClick}) => {\n    return(\n        <header className={cx('header')}>\n            <div className={cx('header-content')}>\n                <div className={cx('left')}>\n                    <Button theme=\"outline\" to=\"/product/registration\">History</Button>\n                    <Button theme=\"outline\" to=\"/product/registration\">Keyword Rank</Button>\n                </div>\n\n                <div className={cx('brand')}>\n                    <Link to=\"/\">Book Search Service</Link>\n                </div>\n                <div className={cx('right')}>\n\n                    <Button theme=\"outline\" onClick={onLoginClick}>{logged ? '로그아웃' : '로그인'}</Button>\n                    {!logged && <Button theme=\"outline\" to=\"/signup\">회원가입</Button>}\n                    {/*<Button theme=\"outline\" to=\"\">{constants.TEXT_CART}</Button>*/}\n                    {/*<Button theme=\"outline\" to=\"\">{constants.TEXT_ORDER}</Button>*/}\n                </div>\n            </div>\n        </header>\n    )\n};\n\nexport default Header;","import { createAction, handleActions } from 'redux-actions';\nimport {fromJS, Map} from 'immutable';\nimport { pender } from 'redux-pender';\n\n// action types\nconst INITIALIZE_LOGIN = 'user/INITIALIZE_LOGIN';\n\n// action creators\nexport const initializeLogin = createAction(INITIALIZE_LOGIN);\n\n// initial state\nconst initialState = Map({\n    login: Map({\n        userId: '',\n        password: '',\n    }),\n    signup: Map({\n        userId: '',\n        name: '',\n        password: '',\n    }),\n});\n\n// reducer\nexport default handleActions({\n    [INITIALIZE_LOGIN]: (state, action) => {\n        return state.set('login', initialState.get('login'));\n    },\n}, initialState)","import React, {Component} from 'react';\nimport Header from 'components/common/Header';\nimport { withRouter } from 'react-router-dom';\n\nimport * as userActions from 'store/modules/user';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nclass HeaderContainer extends Component {\n    handleLoginClick = () => {\n        const logged = sessionStorage.logged;\n        const { UserActions, history } = this.props;\n        if(logged){\n            try{\n                sessionStorage.removeItem(\"id\");\n                sessionStorage.removeItem(\"name\");\n                sessionStorage.removeItem(\"imageUrl\");\n                sessionStorage.removeItem(\"role\");\n                sessionStorage.removeItem(\"accessToken\");\n                sessionStorage.removeItem(\"tokenType\");\n\n                sessionStorage.logged = '';\n                window.location.reload();\n            }catch(e){\n                console.log(e);\n            }\n            return;\n        }\n\n        history.push('/login');\n        UserActions.initializeLogin();\n    };\n\n    render() {\n        const { handleLoginClick } = this;\n        const logged = sessionStorage.logged;\n        return (\n            <Header\n                logged={logged}\n                onLoginClick={handleLoginClick}\n            />\n        );\n    }\n}\n\nexport default connect(\n    (state) => ({\n    }),\n    (dispatch) => ({\n        UserActions: bindActionCreators(userActions, dispatch),\n    })\n)(withRouter(HeaderContainer));","import React from 'react';\nimport styles from './Footer.scss';\nimport classNames from 'classnames/bind';\nimport { Link } from 'react-router-dom';\n\nconst cx = classNames.bind(styles);\n\nconst Footer = () => (\n    <footer className={cx('footer')}>\n        <Link to=\"/\" className={cx('brand')}>Book Search Service</Link>\n    </footer>\n)\n\nexport default Footer;","import React from 'react';\nimport styles from './PageTemplate.scss';\nimport classNames from 'classnames/bind';\nimport HeaderContainer from 'containers/common/HeaderContainer';\nimport Footer from 'components/common/Footer';\n\nconst cx = classNames.bind(styles);\n\nconst PageTemplate = ({children}) => (\n    <div className={cx('page-template')}>\n        <HeaderContainer/>\n        <main>\n            {children}\n        </main>\n        <Footer/>\n    </div>\n)\n\nexport default PageTemplate;","import React from 'react';\nimport styles from './Wrapper.scss';\nimport classNames from 'classnames/bind';\n\nconst cx = classNames.bind(styles);\n\nconst Wrapper = ({children, title}) => (\n    <div className={cx('list-wrapper')}>\n        {title && <div className={cx('title')}>{title}</div>}\n        {children}\n    </div>\n);\n\nexport default Wrapper;","import React from 'react';\nimport styles from './Pagination.scss';\nimport classNames from 'classnames/bind';\nimport Button from 'components/common/Button';\n\nconst cx = classNames.bind(styles);\n\nconst Pagination = ({page, lastPage}) => {\n\n    return (\n        <div className={cx('pagination')}>\n            <Button disabled={page === 1} to={`/page/${page - 1}`}>\n                이전 페이지\n            </Button>\n            <div className={cx('number')}>\n                페이지 {page}\n            </div>\n            <Button disabled={page === lastPage} to={`/page/${page + 1}`}>\n                다음 페이지\n            </Button>\n        </div>\n    )\n}\n\n\n\nexport default Pagination;","import { createAction, handleActions } from 'redux-actions';\n\nimport { Map, List, fromJS } from 'immutable';\nimport { pender } from 'redux-pender';\n\nimport * as api from 'lib/api';\n\n// action types\nconst GET_BOOK_LIST = 'bookList/GET_BOOK_LIST';\nconst CHANGE_INPUT = 'bookList/CHANGE_INPUT';\n\n// action creators\nexport const getBookList = createAction(GET_BOOK_LIST, api.getBookList, meta=>meta);\nexport const changeInput = createAction(CHANGE_INPUT);\n\n// initial state\nconst initialState = Map({\n    targetTypes: List(),\n    books: List(),\n    lastPage: null,\n    query: '',\n    target: null,\n});\n\n// reducer\nexport default handleActions({\n    ...pender({\n        type: GET_BOOK_LIST,\n        onSuccess: (state, action) => {\n            const { content: books } = action.payload.data;\n\n            return state.set('books', fromJS(books))\n                .set('lastPage', parseInt(null, 10));\n        }\n    }),\n    [CHANGE_INPUT]: (state, action) => {\n        const { name, value } = action.payload;\n        return state.set(name, value);\n    },\n\n}, initialState)","import axios from 'axios';\nimport queryString from 'query-string';\n\nexport const getBookList = ({query, page}) => axios.get(`/api/books?${queryString.stringify({query, page})}`);","import React from 'react';\nimport styles from './BookList.scss';\nimport classNames from 'classnames/bind';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nconst cx = classNames.bind(styles);\n\nconst BookItem = ({title, body, publishedDate, id}) => {\n    return (\n        <div className={cx('post-item')}>\n            <h2><Link to={`/post/${id}`}>{title}</Link></h2>\n            <div className={cx('date')}>{moment(publishedDate).format('ll')}</div>\n\n\n        </div>\n    )\n}\n\nconst BookList = ({books}) => {\n    var bookList = \"\";\n    if(books.size > 0) {\n        bookList = books.map(\n            (book) => {\n                const {id, title, body, publishedDate, tags} = book.toJS();\n                return (\n                    <BookItem\n                        title={title}\n                        body={body}\n                        publishedDate={publishedDate}\n                        tags={tags}\n                        key={id}\n                        id={id}\n                    />\n                )\n            }\n        );\n    }\n    return (\n        <div className={cx('post-list')}>\n            {bookList}\n        </div>\n    );\n};\n\nexport default BookList;","import React from 'react';\nimport styles from './SearchBar.scss';\nimport classNames from 'classnames/bind';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport Button from \"../../common/Button\";\n\nconst cx = classNames.bind(styles);\n\nconst SearchBar = ({targetTypes, query, onChangeInput, onSearchClick}) => {\n    const targetTypeList = null;\n    return (\n        <div className={cx('search-bar')}>\n            <select name=\"target\" className={cx('target')}>\n                <option value=\"\" selected>검색조건</option>\n                <option value=\"\">제목</option>\n                <option value=\"\">ISBN</option>\n                <option value=\"\">출판사</option>\n                <option value=\"\">인명</option>\n            </select>\n            <input type=\"text\" name='query' value={query} onChange={onChangeInput}/>\n            <Button className={cx('button')} onClick={onSearchClick}>\n                검색\n            </Button>\n        </div>\n    );\n};\n\nexport default SearchBar;","import React, {Component} from 'react';\nimport Pagination from 'components/list/Pagination';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as bookListActions from 'store/modules/bookList';\nimport BookList from \"../../components/list/BookList\";\nimport SearchBar from \"../../components/list/SearchBar\";\nimport Notifications, { notify } from 'react-notify-toast';\n\nconst toastColor = {\n    background: '#505050',\n    text: '#fff'\n};\n\nclass BookListContainer extends Component {\n    toast = notify.createShowQueue();\n\n    handleSearchClick = () => {\n        const { query, page, BookListActions } = this.props;\n        if(query === ''){\n            this.toast('검색어를 입력하세요.', 'custom', 2000, toastColor);\n            return;\n        }\n\n        BookListActions.getBookList({\n            query, page\n        });\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.page !== this.props.page){\n            this.getBookList();\n            document.documentElement.scrollTop = 0;\n        }\n    }\n\n    handleChangeInput = (e) =>{\n        const { BookListActions } = this.props;\n        const { value, name } = e.target;\n        BookListActions.changeInput({name, value});\n    };\n\n    render() {\n        const { handleChangeInput, handleSearchClick } = this;\n        const { loading, targetTypes, books, query, page, lastPage } = this.props;\n        if(loading) return null;\n        return (\n            <div>\n                <Notifications />\n                <SearchBar targetTypes={targetTypes} query={query} onChangeInput={handleChangeInput} onSearchClick={handleSearchClick}/>\n                <BookList books={books}/>\n\n                {(books.size > 0) && <Pagination page={page} lastPage={lastPage}/>}\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    (state) => ({\n        lastPage: state.bookList.get('lastPage'),\n        books: state.bookList.get('books'),\n        targetTypes: state.bookList.get('targetTypes'),\n        query: state.bookList.get('query'),\n        target: state.bookList.get('target'),\n        loading: state.pender.pending['list/GET_BOOK_LIST']\n    }),\n    (dispatch) => ({\n        BookListActions: bindActionCreators(bookListActions, dispatch)\n    })\n)(BookListContainer);\n","import React from 'react';\nimport PageTemplate from \"../components/common/PageTemplate\";\nimport Wrapper from \"../components/common/Wrapper\";\nimport BookListContainer from \"../containers/list/BookListContainer\";\n\nconst BookListPage = ({match}) => {\n    const { page = 1 } = match.params;\n    return (\n        <PageTemplate>\n            <Wrapper>\n                <BookListContainer page={parseInt(page, 10)} />\n            </Wrapper>\n        </PageTemplate>\n    );\n};\n\nexport default BookListPage;","import React from 'react';\n\nconst NotFoundPage = () => {\n    return (\n        <div>\n            NotFound\n        </div>\n    );\n};\n\nexport default NotFoundPage;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { BookListPage, NotFoundPage } from \"../pages\";\n\nconst App = () => {\n  return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={BookListPage}/>\n          <Route path=\"/page/:page\" component={BookListPage}/>\n          <Route component={NotFoundPage}/>\n        </Switch>\n      </div>\n  );\n};\n\nexport default App;\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport penderMiddleware from 'redux-pender';\nimport * as modules from './modules';\n\nconst reducers = combineReducers(modules);\nconst middlewares = [penderMiddleware()];\n\nconst isDev = process.env.NODE_ENV === 'development';\nconst devtools = isDev && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n//const devtools = window.devToolsExtension && window.devToolsExtension();\nconst composeEnhancers = devtools || compose;\n\nconst configure = (preloadedState) => createStore(reducers, preloadedState, composeEnhancers(\n    applyMiddleware(...middlewares)\n));\n\nexport default configure;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from 'components/App';\nimport { Provider } from 'react-redux';\nimport configure from 'store/configure';\n\nconst store = configure();\n\nconst Root = () => {\n    return (\n        <Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </Provider>\n    )\n}\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Root from \"./Root\";\nimport 'styles/base.scss';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}